# solve file for day09 problem
import sys
from os import path

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from read_file import by_lines

solve_dir = path.dirname(path.abspath(__file__))
input_path = path.join(solve_dir, "input")
content = by_lines(input_path)
testcontent = """R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20""".split(
    "\n"
)

# generated by make_dirs.py

dirs = {
    "R": (1, 0),
    "L": (-1, 0),
    "U": (0, 1),
    "D": (0, -1),
}


def part1() -> int:
    return simulate(2)


def part2() -> int:
    return simulate(10)


def simulate(rope_len: int) -> int:
    res = set()
    moves = [(line.split()[0], int(line.split()[1])) for line in content]

    rope = [(0, 0) for _ in range(rope_len)]
    for d, dist in moves:
        for _ in range(dist):
            new_rope = move_rope(d, rope)

            res.add(new_rope[-1])
            rope = new_rope

    return len(res)


def move_rope(d: str, rope: list[tuple[int, int]]) -> list[tuple[int, int]]:
    new_rope = []
    delta_x, delta_y = dirs[d]
    head = rope[0]
    new_head = (head[0] + delta_x, head[1] + delta_y)
    new_rope.append(new_head)

    for i in range(1, len(rope)):
        nxt = move_knot(new_rope[-1], rope[i])
        new_rope.append(nxt)

    return new_rope


def move_knot(head: tuple[int, int], tail: tuple[int, int]) -> tuple[int, int]:
    dist_squared = (head[0] - tail[0]) ** 2 + (head[1] - tail[1]) ** 2
    if dist_squared == 4:
        if head[0] == tail[0]:
            return (head[0], (head[1] + tail[1]) // 2)
        else:
            return ((head[0] + tail[0]) // 2, head[1])

    elif dist_squared == 5:
        if abs(head[0] - tail[0]) == 2:
            return ((head[0] + tail[0]) // 2, head[1])
        else:
            return (head[0], (head[1] + tail[1]) // 2)

    elif dist_squared == 8:
        return ((head[0] + tail[0]) // 2, (head[1] + tail[1]) // 2)

    else:
        return tail


if __name__ == "__main__":
    print("part1", part1())
    print("part2", part2())
