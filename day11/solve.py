# solve file for day11 problem
import sys
from os import path

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from read_file import by_lines

solve_dir = path.dirname(path.abspath(__file__))
input_path = path.join(solve_dir, "input")
content = by_lines(input_path)
testcontent = """Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0

Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1""".split(
    "\n"
)

# generated by make_dirs.py


from typing import Callable, List


class Monkey:
    def __init__(
        self,
        mid: int,
        items: List[int],
        op: Callable[[int], int],
        test: Callable[[int], bool],
        true_to: int,
        false_to: int,
    ):
        self.mid = mid
        self.items = items
        self.op = op
        self.test = test
        self.true_to = true_to
        self.false_to = false_to

    def add_item(self, item):
        self.items.append(item)

    def __str__(self) -> str:
        return (
            "Monkey "
            + str(self.mid)
            + " with items "
            + str(self.items)
            + " and op "
            + str(self.op)
            + " and test "
            + str(self.test)
            + " and true_to "
            + str(self.true_to)
            + " and false_to "
            + str(self.false_to)
        )

    def __repr__(self) -> str:
        return self.__str__()


def part1() -> int:
    monkeys = parse_monkeys(content)
    inspect_counter = [0 for _ in range(len(monkeys))]

    for _round in range(20):
        for i, m in enumerate(monkeys):
            for item in m.items:
                inspect_counter[i] += 1
                res = m.op(item)
                res = res // 3
                if m.test(res):
                    monkeys[m.true_to].add_item(res)
                else:
                    monkeys[m.false_to].add_item(res)
            # clear the items
            m.items = []

    sorted_counter = sorted(inspect_counter)
    return sorted_counter[-1] * sorted_counter[-2]


def parse_monkeys(content) -> List[Monkey]:
    monkeys = []

    i = 0
    while i < len(content):
        line = content[i]
        if line.startswith("Monkey"):
            mid = int(line.split()[1].strip(":"))
            starting_item = content[i + 1].split(":")[1].strip().split(", ")
            op = eval(content[i + 2].replace("Operation: new =", "lambda old:"))
            test = eval(
                content[i + 3].replace("Test: divisible by", "lambda x: x % ") + " == 0"
            )
            true_to = content[i + 4].split()[-1]
            false_to = content[i + 5].split()[-1]

            monkey = Monkey(
                mid,
                list(map(int, starting_item)),
                op,
                test,
                int(true_to),
                int(false_to),
            )
            monkeys.append(monkey)
            i += 5
        else:
            i += 1

    return monkeys




def part2() -> int:
    from functools import reduce
    from operator import mul
    monkeys = parse_monkeys(content)
    inspect_counter = [0 for _ in range(len(monkeys))]

    test_lines = filter(lambda s: "Test" in s, content)

    factors = map(lambda s: int(s.split()[-1].strip()), test_lines)

    common_factor = reduce(mul, factors, 1)

    for _round in range(10000):
        for i, m in enumerate(monkeys):
            for item in m.items:
                inspect_counter[i] += 1
                res = m.op(item)
                res = res % common_factor
                if m.test(res):
                    monkeys[m.true_to].add_item(res)
                else:
                    monkeys[m.false_to].add_item(res)
            # clear the items
            m.items = []

    sorted_counter = sorted(inspect_counter)
    return sorted_counter[-1] * sorted_counter[-2]


if __name__ == "__main__":
    print("part1", part1())
    print("part2", part2())
