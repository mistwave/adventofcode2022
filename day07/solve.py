# solve file for day07 problem 
import sys
from os import path

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from read_file import by_lines

solve_dir = path.dirname(path.abspath(__file__))
input_path = path.join(solve_dir, "input")
content = by_lines(input_path)

# generated by make_dirs.py

def part1() -> int:
    res = [0]

    def iter(r: Node) -> int:
        # empty node
        if r is None:
            return 0
        
        total = 0
        # iterate all subdirs
        for _, size in r.files():
            total += size
        
        # iterate all files
        for _, child in r.dirs().items():
            total += iter(child)

        if total < 100000:
            res[0] += total

        return total

    root = parse_dirs(content)
    iter(root)
    return res[0]

def part2() -> int:
    sizes = []

    def iter(r: Node) -> int:
        # empty node
        if r is None:
            return 0
        
        total = 0
        # iterate all subdirs
        for _, size in r.files():
            total += size
        
        # iterate all files
        for _, child in r.dirs().items():
            total += iter(child)

        sizes.append(total)
        return total

    root = parse_dirs(content)
    iter(root)

    sorted_sizes = sorted(sizes)
    allused = sorted_sizes[-1]
    for x in sorted_sizes:
        if x > 30000000 - (70000000 - allused):
            return x

    raise ValueError("no answer")
    




from typing import Tuple, List
File = Tuple[str, int]

class Node:
    def __init__(self, segment: str):
        self.segment = segment
        self._dirs = {}
        self._files = []

    def segmentname(self) -> str:
        return self.segment

    def addfile(self, file: File):
        self._files.append(file)
    
    def adddir(self, node):
        self._dirs[node.segmentname()] = node

    def dirs(self):
        return {k:v for k, v in self._dirs.items()}
    
    def files(self):
        return self._files[:]

    def nochilds(self) -> bool:
        return len(self._dirs) == 0


def parse_dirs(content: List[str]) -> Node:
    root = Node("/")
    path = [root]
    i = 1 # skip first line 'cd /'
    while i < len(content):
        line = content[i]
        tokens = line.split()
        if tokens[0] == '$':
            if tokens[1] == 'cd':
                if tokens[2] == '..':
                    path.pop()
                else:
                    # new node
                    child = Node(tokens[2])
                    path[-1].adddir(child)
                    path.append(child)
                i += 1
            elif tokens[1] == 'ls':
                i += 1
                while i < len(content) and content[i].split()[0] != '$':
                    entry_tokens = content[i].split()
                    if entry_tokens[0] == 'dir':
                        # current entry is dir
                        pass
                    else:
                        # current entry is a file
                        file = (entry_tokens[1], int(entry_tokens[0]))
                        path[-1].addfile(file)
                    i += 1
        else:
            raise ValueError("invalid input")

    return root







if __name__ == "__main__":
    print("part1", part1())
    print("part2", part2())
